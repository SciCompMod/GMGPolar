#pragma once

#include "systemParameters.h"

inline double SystemParameters::getAlphaJump() const {
    return alpha_jump;
}


// ------------------ //
// Poisson Alpha/Beta //
// ------------------ //

// inline double SystemParameters::alpha(const double& r) const {
//     return 0.0;
// }
// inline double SystemParameters::beta(const double& r) const {
//     return 0.0;
// }


// ------------------------ //
// Sonnendrucker Alpha/Beta //
// ------------------------ //

// inline double SystemParameters::alpha(const double& r) const
// { // see Kuehn et al. https://doi.org/10.1007/s10915-022-01802-1, Eq. (2.3) with Rmax=1.3
//     return 0.452961672473868 - 0.348432055749129 * atan(14.4444444444444 * (r/Rmax) - 11.1111111111111);
// }
// inline double SystemParameters::beta(const double& r) const {
//     return pow((0.452961672473868 - 0.348432055749129 * atan(14.4444444444444 * (r/Rmax) - 11.1111111111111)), (double)((-1))); /* In earlier versions denoted by 'Gyro' */
//     // return 0.0;
// }


// --------------- //
// Zoni Alpha/Beta //
// --------------- //

inline double SystemParameters::alpha(const double& r) const{
    return exp(-tanh(10.0 * (r/Rmax) - 5.0));
}
inline double SystemParameters::beta(const double& r) const {
    return exp(tanh(10.0 * (r/Rmax) - 5.0)); /* In earlier versions denoted by 'Gyro' */
    // return 0.0;
}


// ----------------------- //
// Zoni Shifted Alpha/Beta //
// ----------------------- //

// inline double SystemParameters::alpha(const double& r) const
// { // With Rmax=1, equals alpha(r) from equation (18) of Bourne et al. https://doi.org/10.1016/j.jcp.2023.112249
//     return exp(-tanh(20.0 * (r/Rmax) - 14.0));
// }
// inline double SystemParameters::beta(const double& r) const {
//     return exp(tanh(20.0 * (r/Rmax) - 14.0)); /* In earlier versions denoted by 'Gyro' */
//     // return 0.0;
// }


/* --------------------------------------------------------------------------- */
/* Set u_D, u_D_Interior and rhs_f depending on the problem and exact solution */

inline double SystemParameters::u_D(const double& r, const double& theta, const double& sin_theta, const double& cos_theta) const {
    return 0.4096 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin_theta + 2.0 * (r/Rmax) * sin_theta)) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos_theta + 2.0 * (r/Rmax) * cos_theta));
}

inline double SystemParameters::u_D_Interior(const double& r, const double& theta, const double& sin_theta, const double& cos_theta) const {
    return 0.4096 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin_theta + 2.0 * (r/Rmax) * sin_theta)) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos_theta + 2.0 * (r/Rmax) * cos_theta));
}

// In earlier versions denoted by 'rho_glob'
inline double SystemParameters::rhs_f(const double& r, const double& theta, const double& sin_theta, const double& cos_theta) const {   
    return 0.4096 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * exp(tanh(10.0 * (r/Rmax) - 5.0)) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin_theta + 2.0 * (r/Rmax) * sin_theta)) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos_theta + 2.0 * (r/Rmax) * cos_theta)) - (2.0 * map1_delta * (r/Rmax) * (map1_kappa - 1.0) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) * sin_theta / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-1.6384) * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos_theta * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * (1.6384 * M_PI * map1_delta * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 1.6384 * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 2.4576 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 12.288 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 4.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 2.4576 * M_PI * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 29.4912 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + 12.288 * pow(((r/Rmax) - 1.0), 4.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin_theta + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (r/Rmax) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin_theta + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * ((-1.6384) * (M_PI * M_PI) * (r/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * pow(cos_theta, 2.0) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * pow((2.0 * map1_kappa - 2.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 0.8192 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos_theta * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos_theta - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * sin_theta * cos_theta - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin_theta, 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * cos_theta + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-1.6384) * (M_PI * M_PI) * (r/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos_theta * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (pow((map1_kappa - 1.0), 2.0) * pow(sin_theta, 2.0) + (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * cos_theta + pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta)) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * sin_theta * cos_theta - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin_theta, 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * cos_theta + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0))) / ((r/Rmax) * sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)));
}

