
### Layout
- Add a license disclaimer to each and every file just like in Version 1.0


### Compilation
- Remove custom paths from the CMakeLists.txt
- The tests on the GitHub Repository are failing 
  -> Mumps library not found


### Algorithm
- The additional "temp" storage vector is not actually needed. This does not negatively impact performance.
  We can solve the systems in the x variable directly.


### Classes
- More seperation of functionalities inside the GMGPolar Class.
  -> Addition of a MultigridSolver class?


### Improved explaination of SparseMatrix indexing
  In a sparse matrix solver, particularly when using a grid-based numerical method, each node in the grid 
  is associated with a stencil that defines how many non-zero entries will appear in the matrix for that node. 
  The number of non-zero entries in a row of the matrix corresponds to the size of the stencil for the respective node.

  To determine the position of a node in the sparse matrix (in formats like COO), follow these steps:

  To find the index for a particular node in the matrix, sum the stencil sizes of all preceding nodes in the grid. 
  This cumulative sum gives you the pointer to the starting index of the desired node's entries in the sparse matrix.
  Once you have the starting index for the node, you can locate specific stencil entries by 
  adding an offset value (ranging from 0 to stencil_size - 1). 
  This offset identifies which non-zero entry within the node's stencil you are accessing.

  The COO fomat is used since Mumps does not support the CRS format.
  The row and column indexing in Mumps starts with 1 instead of 0. 


Known issues:
- In src/Level/level.cpp we include the derived operator classes (Residual, DirectSolver, Smoother).
  There seems to be an issue with circular dependencies when moving these includes to include/Level/level.h.
- The use of alpha_jump and refinement_radius is unituitive.
  Alpha jump is only used for the refinement_radius.
  Suggestion: Remove alpha_jump entirely and use refinement_radius instead. 
