#include "../../include/test_cases/CartesianR2GyroZoniShafranov.h"

double CartesianR2GyroZoniShafranov::x(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (-map1_delta) * ((r/Rmax) * (r/Rmax)) - map1_kappa * (r/Rmax) * cos(theta) + (r/Rmax) * cos(theta);
}

double CartesianR2GyroZoniShafranov::y(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return map1_kappa * (r/Rmax) * sin(theta) + (r/Rmax) * sin(theta);
}

double CartesianR2GyroZoniShafranov::J_rr(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta))/Rmax;
}

double CartesianR2GyroZoniShafranov::J_rt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (r/Rmax) * (map1_kappa * sin(theta) - sin(theta));
}

double CartesianR2GyroZoniShafranov::J_tr(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return ((map1_kappa + 1.0) * sin(theta))/Rmax;
}

double CartesianR2GyroZoniShafranov::J_tt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (r/Rmax) * (map1_kappa * cos(theta) + cos(theta));
}

double CartesianR2GyroZoniShafranov::J_xs(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (-cos(theta)) / (2.0 * map1_delta * (r/Rmax) * cos(theta) + map1_kappa * pow(sin(theta), 2.0) + map1_kappa * pow(cos(theta), 2.0) - pow(sin(theta), 2.0) - pow(cos(theta), 2.0));
}

double CartesianR2GyroZoniShafranov::J_xt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (map1_kappa * sin(theta) - sin(theta)) / (2.0 * map1_delta * map1_kappa * (r/Rmax) * cos(theta) + 2.0 * map1_delta * (r/Rmax) * cos(theta) + map1_kappa * map1_kappa * pow(sin(theta), 2.0) + map1_kappa * map1_kappa * pow(cos(theta), 2.0) - pow(sin(theta), 2.0) - pow(cos(theta), 2.0));
}

double CartesianR2GyroZoniShafranov::J_ys(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return sin(theta) / (2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos(theta) + map1_kappa * (r/Rmax) * pow(sin(theta), 2.0) + map1_kappa * (r/Rmax) * pow(cos(theta), 2.0) - (r/Rmax) * pow(sin(theta), 2.0) - (r/Rmax) * pow(cos(theta), 2.0));
}

double CartesianR2GyroZoniShafranov::J_yt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (2.0 * map1_delta * (r/Rmax) + map1_kappa * cos(theta) - cos(theta)) / (2.0 * map1_delta * map1_kappa * ((r/Rmax) * (r/Rmax)) * cos(theta) + 2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos(theta) + map1_kappa * map1_kappa * (r/Rmax) * pow(sin(theta), 2.0) + map1_kappa * map1_kappa * (r/Rmax) * pow(cos(theta), 2.0) - (r/Rmax) * pow(sin(theta), 2.0) - (r/Rmax) * pow(cos(theta), 2.0));
}

double CartesianR2GyroZoniShafranov::rho_glob(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (1.0 - (r/Rmax) * (r/Rmax)) * exp(tanh(10.0 * (r/Rmax) - 5.0)) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin(theta) + 2.0 * (r/Rmax) * sin(theta))) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos(theta) + 2.0 * (r/Rmax) * cos(theta))) - (2.0 * map1_delta * (r/Rmax) * (map1_kappa - 1.0) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) * sin(theta) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.0 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 4.0 * (M_PI * M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - M_PI * M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (4.0 * M_PI * map1_delta * (1.0 - (r/Rmax) * (r/Rmax)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 4.0 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.0 * (r/Rmax) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.0 * M_PI * (r/Rmax) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 4.0 * (M_PI * M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.0 * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin(theta) + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (r/Rmax) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin(theta) + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0)) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * ((-4.0) * (M_PI * M_PI) * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * pow(cos(theta), 2.0) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((2.0 * map1_kappa - 2.0), 2.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.0 * (M_PI * M_PI) * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * sin(theta) * cos(theta) - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * M_PI * ((r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.0 * M_PI * ((r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 4.0 * (M_PI * M_PI) * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta)) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * sin(theta) * cos(theta) - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0))) / ((r/Rmax) * sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)));
}

double CartesianR2GyroZoniShafranov::rho_pole(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return 0.0;
}

double CartesianR2GyroZoniShafranov::coeffs1(double r, double Rmax) const
{
    return exp(-tanh(10.0 * (r/Rmax) - 5.0));
}

double CartesianR2GyroZoniShafranov::coeffs2(double r, double Rmax) const
{
    return exp(tanh(10.0 * (r/Rmax) - 5.0));
}

double CartesianR2GyroZoniShafranov::phi_exact(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (1.0 - (r/Rmax) * (r/Rmax)) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin(theta) + 2.0 * (r/Rmax) * sin(theta))) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos(theta) + 2.0 * (r/Rmax) * cos(theta)));
}




double CartesianR2GyroZoniShafranov::x(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (-map1_delta) * ((r/Rmax) * (r/Rmax)) - map1_kappa * (r/Rmax) * cos_theta + (r/Rmax) * cos_theta;
}

double CartesianR2GyroZoniShafranov::y(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return map1_kappa * (r/Rmax) * sin_theta + (r/Rmax) * sin_theta;
}

double CartesianR2GyroZoniShafranov::J_rr(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta)/Rmax;
}

double CartesianR2GyroZoniShafranov::J_rt(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (r/Rmax) * (map1_kappa * sin_theta - sin_theta);
}

double CartesianR2GyroZoniShafranov::J_tr(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return ((map1_kappa + 1.0) * sin_theta)/Rmax;
}

double CartesianR2GyroZoniShafranov::J_tt(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (r/Rmax) * (map1_kappa * cos_theta + cos_theta);
}

double CartesianR2GyroZoniShafranov::J_xs(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (-cos_theta) / (2.0 * map1_delta * (r/Rmax) * cos_theta + map1_kappa * pow(sin_theta, 2.0) + map1_kappa * pow(cos_theta, 2.0) - pow(sin_theta, 2.0) - pow(cos_theta, 2.0));
}

double CartesianR2GyroZoniShafranov::J_xt(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (map1_kappa * sin_theta - sin_theta) / (2.0 * map1_delta * map1_kappa * (r/Rmax) * cos_theta + 2.0 * map1_delta * (r/Rmax) * cos_theta + map1_kappa * map1_kappa * pow(sin_theta, 2.0) + map1_kappa * map1_kappa * pow(cos_theta, 2.0) - pow(sin_theta, 2.0) - pow(cos_theta, 2.0));
}

double CartesianR2GyroZoniShafranov::J_ys(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return sin_theta / (2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos_theta + map1_kappa * (r/Rmax) * pow(sin_theta, 2.0) + map1_kappa * (r/Rmax) * pow(cos_theta, 2.0) - (r/Rmax) * pow(sin_theta, 2.0) - (r/Rmax) * pow(cos_theta, 2.0));
}

double CartesianR2GyroZoniShafranov::J_yt(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (2.0 * map1_delta * (r/Rmax) + map1_kappa * cos_theta - cos_theta) / (2.0 * map1_delta * map1_kappa * ((r/Rmax) * (r/Rmax)) * cos_theta + 2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos_theta + map1_kappa * map1_kappa * (r/Rmax) * pow(sin_theta, 2.0) + map1_kappa * map1_kappa * (r/Rmax) * pow(cos_theta, 2.0) - (r/Rmax) * pow(sin_theta, 2.0) - (r/Rmax) * pow(cos_theta, 2.0));
}

double CartesianR2GyroZoniShafranov::rho_glob(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (1.0 - (r/Rmax) * (r/Rmax)) * exp(tanh(10.0 * (r/Rmax) - 5.0)) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin_theta + 2.0 * (r/Rmax) * sin_theta)) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos_theta + 2.0 * (r/Rmax) * cos_theta)) - (2.0 * map1_delta * (r/Rmax) * (map1_kappa - 1.0) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) * sin_theta / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 2.0 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 4.0 * (M_PI * M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - M_PI * M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos_theta * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * (4.0 * M_PI * map1_delta * (1.0 - (r/Rmax) * (r/Rmax)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 4.0 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.0 * (r/Rmax) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + 2.0 * M_PI * (r/Rmax) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 4.0 * (M_PI * M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 2.0 * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin_theta + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (r/Rmax) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin_theta + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0)) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * ((-4.0) * (M_PI * M_PI) * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * pow(cos_theta, 2.0) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((2.0 * map1_kappa - 2.0), 2.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - 2.0 * (M_PI * M_PI) * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos_theta * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos_theta - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * sin_theta * cos_theta - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin_theta, 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * cos_theta + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-M_PI) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * M_PI * ((r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 2.0 * M_PI * ((r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - 4.0 * (M_PI * M_PI) * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * pow((map1_kappa + 1.0), 2.0) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(sin_theta, 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin_theta * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) - M_PI * M_PI * (r/Rmax) * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos_theta * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa - 2.0) * sin_theta * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * cos_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (pow((map1_kappa - 1.0), 2.0) * pow(sin_theta, 2.0) + (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * cos_theta + pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta)) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * (r/Rmax) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) + M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * (2.0 * map1_kappa + 2.0) * sin_theta * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta) - M_PI * (1.0 - (r/Rmax) * (r/Rmax)) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta + 2.0 * cos_theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta)) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * sin_theta * cos_theta - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin_theta, 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * cos_theta + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0))) / ((r/Rmax) * sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta, 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta, 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta + cos_theta) * sin_theta + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)));
}

double CartesianR2GyroZoniShafranov::rho_pole(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return 0.0;
}

double CartesianR2GyroZoniShafranov::phi_exact(double r, double theta, double map1_kappa, double map1_delta, double Rmax, double sin_theta, double cos_theta) const
{
    return (1.0 - (r/Rmax) * (r/Rmax)) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin_theta + 2.0 * (r/Rmax) * sin_theta)) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos_theta + 2.0 * (r/Rmax) * cos_theta));
}
