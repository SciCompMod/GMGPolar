// CartesianR6 simulates solution (23) of Bourne et al. https://doi.org/10.1016/j.jcp.2023.112249
#include "CartesianR6ZoniShafranov.h"
#include <stdlib.h>
#include <math.h>


/*........................................*/
double CartesianR6ZoniShafranov::x(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (-map1_delta) * ((r/Rmax) * (r/Rmax)) - map1_kappa * (r/Rmax) * cos(theta) + (r/Rmax) * cos(theta);
}
/*........................................*/
void CartesianR6ZoniShafranov::x(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (-map1_delta) * ((r[i]/Rmax) * (r[i]/Rmax)) - map1_kappa * (r[i]/Rmax) * cos(theta) + (r[i]/Rmax) * cos(theta);
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::x(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (-map1_delta) * ((r/Rmax) * (r/Rmax)) - map1_kappa * (r/Rmax) * cos_theta[i] + (r/Rmax) * cos_theta[i];
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::y(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return map1_kappa * (r/Rmax) * sin(theta) + (r/Rmax) * sin(theta);
}
/*........................................*/
void CartesianR6ZoniShafranov::y(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = map1_kappa * (r[i]/Rmax) * sin(theta) + (r[i]/Rmax) * sin(theta);
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::y(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = map1_kappa * (r/Rmax) * sin_theta[i] + (r/Rmax) * sin_theta[i];
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_rr(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta))/Rmax;
}
/*........................................*/
void CartesianR6ZoniShafranov::J_rr(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta))/Rmax;
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_rr(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i])/Rmax;
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_rt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (r/Rmax) * (map1_kappa * sin(theta) - sin(theta));
}
/*........................................*/
void CartesianR6ZoniShafranov::J_rt(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (r[i]/Rmax) * (map1_kappa * sin(theta) - sin(theta));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_rt(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (r/Rmax) * (map1_kappa * sin_theta[i] - sin_theta[i]);
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_tr(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return ((map1_kappa + 1.0) * sin(theta))/Rmax;
}
/*........................................*/
void CartesianR6ZoniShafranov::J_tr(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = ((map1_kappa + 1.0) * sin(theta))/Rmax;
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_tr(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = ((map1_kappa + 1.0) * sin_theta[i])/Rmax;
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_tt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (r/Rmax) * (map1_kappa * cos(theta) + cos(theta));
}
/*........................................*/
void CartesianR6ZoniShafranov::J_tt(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (r[i]/Rmax) * (map1_kappa * cos(theta) + cos(theta));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_tt(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (r/Rmax) * (map1_kappa * cos_theta[i] + cos_theta[i]);
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_xs(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (-cos(theta)) / (2.0 * map1_delta * (r/Rmax) * cos(theta) + map1_kappa * pow(sin(theta), 2.0) + map1_kappa * pow(cos(theta), 2.0) - pow(sin(theta), 2.0) - pow(cos(theta), 2.0));
}
/*........................................*/
void CartesianR6ZoniShafranov::J_xs(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (-cos(theta)) / (2.0 * map1_delta * (r[i]/Rmax) * cos(theta) + map1_kappa * pow(sin(theta), 2.0) + map1_kappa * pow(cos(theta), 2.0) - pow(sin(theta), 2.0) - pow(cos(theta), 2.0));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_xs(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (-cos_theta[i]) / (2.0 * map1_delta * (r/Rmax) * cos_theta[i] + map1_kappa * pow(sin_theta[i], 2.0) + map1_kappa * pow(cos_theta[i], 2.0) - pow(sin_theta[i], 2.0) - pow(cos_theta[i], 2.0));
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_xt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (map1_kappa * sin(theta) - sin(theta)) / (2.0 * map1_delta * map1_kappa * (r/Rmax) * cos(theta) + 2.0 * map1_delta * (r/Rmax) * cos(theta) + map1_kappa * map1_kappa * pow(sin(theta), 2.0) + map1_kappa * map1_kappa * pow(cos(theta), 2.0) - pow(sin(theta), 2.0) - pow(cos(theta), 2.0));
}
/*........................................*/
void CartesianR6ZoniShafranov::J_xt(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (map1_kappa * sin(theta) - sin(theta)) / (2.0 * map1_delta * map1_kappa * (r[i]/Rmax) * cos(theta) + 2.0 * map1_delta * (r[i]/Rmax) * cos(theta) + map1_kappa * map1_kappa * pow(sin(theta), 2.0) + map1_kappa * map1_kappa * pow(cos(theta), 2.0) - pow(sin(theta), 2.0) - pow(cos(theta), 2.0));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_xt(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (map1_kappa * sin_theta[i] - sin_theta[i]) / (2.0 * map1_delta * map1_kappa * (r/Rmax) * cos_theta[i] + 2.0 * map1_delta * (r/Rmax) * cos_theta[i] + map1_kappa * map1_kappa * pow(sin_theta[i], 2.0) + map1_kappa * map1_kappa * pow(cos_theta[i], 2.0) - pow(sin_theta[i], 2.0) - pow(cos_theta[i], 2.0));
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_ys(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return sin(theta) / (2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos(theta) + map1_kappa * (r/Rmax) * pow(sin(theta), 2.0) + map1_kappa * (r/Rmax) * pow(cos(theta), 2.0) - (r/Rmax) * pow(sin(theta), 2.0) - (r/Rmax) * pow(cos(theta), 2.0));
}
/*........................................*/
void CartesianR6ZoniShafranov::J_ys(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = sin(theta) / (2.0 * map1_delta * ((r[i]/Rmax) * (r[i]/Rmax)) * cos(theta) + map1_kappa * (r[i]/Rmax) * pow(sin(theta), 2.0) + map1_kappa * (r[i]/Rmax) * pow(cos(theta), 2.0) - (r[i]/Rmax) * pow(sin(theta), 2.0) - (r[i]/Rmax) * pow(cos(theta), 2.0));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_ys(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = sin_theta[i] / (2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos_theta[i] + map1_kappa * (r/Rmax) * pow(sin_theta[i], 2.0) + map1_kappa * (r/Rmax) * pow(cos_theta[i], 2.0) - (r/Rmax) * pow(sin_theta[i], 2.0) - (r/Rmax) * pow(cos_theta[i], 2.0));
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::J_yt(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (2.0 * map1_delta * (r/Rmax) + map1_kappa * cos(theta) - cos(theta)) / (2.0 * map1_delta * map1_kappa * ((r/Rmax) * (r/Rmax)) * cos(theta) + 2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos(theta) + map1_kappa * map1_kappa * (r/Rmax) * pow(sin(theta), 2.0) + map1_kappa * map1_kappa * (r/Rmax) * pow(cos(theta), 2.0) - (r/Rmax) * pow(sin(theta), 2.0) - (r/Rmax) * pow(cos(theta), 2.0));
}
/*........................................*/
void CartesianR6ZoniShafranov::J_yt(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (2.0 * map1_delta * (r[i]/Rmax) + map1_kappa * cos(theta) - cos(theta)) / (2.0 * map1_delta * map1_kappa * ((r[i]/Rmax) * (r[i]/Rmax)) * cos(theta) + 2.0 * map1_delta * ((r[i]/Rmax) * (r[i]/Rmax)) * cos(theta) + map1_kappa * map1_kappa * (r[i]/Rmax) * pow(sin(theta), 2.0) + map1_kappa * map1_kappa * (r[i]/Rmax) * pow(cos(theta), 2.0) - (r[i]/Rmax) * pow(sin(theta), 2.0) - (r[i]/Rmax) * pow(cos(theta), 2.0));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::J_yt(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (2.0 * map1_delta * (r/Rmax) + map1_kappa * cos_theta[i] - cos_theta[i]) / (2.0 * map1_delta * map1_kappa * ((r/Rmax) * (r/Rmax)) * cos_theta[i] + 2.0 * map1_delta * ((r/Rmax) * (r/Rmax)) * cos_theta[i] + map1_kappa * map1_kappa * (r/Rmax) * pow(sin_theta[i], 2.0) + map1_kappa * map1_kappa * (r/Rmax) * pow(cos_theta[i], 2.0) - (r/Rmax) * pow(sin_theta[i], 2.0) - (r/Rmax) * pow(cos_theta[i], 2.0));
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::rho_glob(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return (-(2.0 * map1_delta * (r/Rmax) * (map1_kappa - 1.0) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) * sin(theta) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-1.6384) * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r/Rmax) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (1.6384 * M_PI * map1_delta * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 1.6384 * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 12.288 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 4.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 29.4912 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 12.288 * pow(((r/Rmax) - 1.0), 4.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin(theta) + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (r/Rmax) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin(theta) + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * ((-1.6384) * (M_PI * M_PI) * (r/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * pow(cos(theta), 2.0) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * pow((2.0 * map1_kappa - 2.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.8192 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * sin(theta) * cos(theta) - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-1.6384) * (M_PI * M_PI) * (r/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(theta) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta)) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * sin(theta) * cos(theta) - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)))) / ((r/Rmax) * sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)));
}
/*........................................*/
void CartesianR6ZoniShafranov::rho_glob(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (-(2.0 * map1_delta * (r[i]/Rmax) * (map1_kappa - 1.0) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) * sin(theta) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r[i]/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (10.0 * pow(tanh(10.0 * (r[i]/Rmax) - 5.0), 2.0) - 10.0) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r[i]/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-1.6384) * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r[i]/Rmax) + M_PI * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(theta) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r[i]/Rmax) + M_PI * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r[i]/Rmax) * (10.0 * pow(tanh(10.0 * (r[i]/Rmax) - 5.0), 2.0) - 10.0) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (r[i]/Rmax) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (1.6384 * M_PI * map1_delta * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 1.6384 * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r[i]/Rmax) + M_PI * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r[i]/Rmax) + M_PI * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * ((-2.0) * M_PI * map1_delta * (r[i]/Rmax) + M_PI * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 12.288 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 4.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r[i]/Rmax) + M_PI * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 29.4912 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 12.288 * pow(((r[i]/Rmax) - 1.0), 4.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (r[i]/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin(theta) + 2.0 * map1_delta * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (r[i]/Rmax) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * sin(theta) + 2.0 * map1_delta * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * ((-1.6384) * (M_PI * M_PI) * (r[i]/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * pow(cos(theta), 2.0) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * (M_PI * M_PI) * (r[i]/Rmax) * pow((2.0 * map1_kappa - 2.0), 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.8192 * (M_PI * M_PI) * (r[i]/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * sin(theta) * cos(theta) - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * ((-1.6384) * (M_PI * M_PI) * (r[i]/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 0.4096 * (M_PI * M_PI) * (r[i]/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * pow(sin(theta), 2.0) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * (M_PI * M_PI) * (r[i]/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(theta) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) - 2.4576 * M_PI * (r[i]/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 2.4576 * M_PI * (r[i]/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * (M_PI * M_PI) * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(theta) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * cos(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - (pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta)) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) + (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * sin(theta) * cos(theta) - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin(theta), 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * cos(theta) + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta))) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(theta) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * cos(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) - 0.4096 * M_PI * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)) * sin(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 5.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta))) + 2.4576 * pow(((r[i]/Rmax) - 1.0), 5.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (r[i]/Rmax) * (2.0 * map1_kappa + 2.0) * sin(theta)) * cos(M_PI * (r[i]/Rmax) * ((-2.0) * map1_delta * (r[i]/Rmax) - 2.0 * map1_kappa * cos(theta) + 2.0 * cos(theta)))) * exp(-tanh(10.0 * (r[i]/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)), (3.0 / 2.0)))) / ((r[i]/Rmax) * sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin(theta), 2.0) + pow(((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin(theta), 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r[i]/Rmax) - map1_kappa * cos(theta) + cos(theta)) * sin(theta) + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta)), 2.0)));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::rho_glob(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = (-(2.0 * map1_delta * (r/Rmax) * (map1_kappa - 1.0) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) * sin_theta[i] / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * ((-1.6384) * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta[i], 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin_theta[i] * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 2.4576 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos_theta[i] * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) + (r/Rmax) * (10.0 * pow(tanh(10.0 * (r/Rmax) - 5.0), 2.0) - 10.0) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) + (r/Rmax) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) * (1.6384 * M_PI * map1_delta * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 1.6384 * (M_PI * M_PI) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta[i], 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * (M_PI * M_PI) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 4.9152 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 2.4576 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 12.288 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 4.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-2.0) * M_PI * map1_delta * (r/Rmax) + M_PI * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 2.4576 * M_PI * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 29.4912 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) + 12.288 * pow(((r/Rmax) - 1.0), 4.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - (r/Rmax) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * sin_theta[i] + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)), (3.0 / 2.0)) + (r/Rmax) * ((-2.0) * map1_delta * (map1_kappa - 1.0) * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * sin_theta[i] + 2.0 * map1_delta * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * ((-1.6384) * (M_PI * M_PI) * (r/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * pow(cos_theta[i], 2.0) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * pow((2.0 * map1_kappa - 2.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta[i], 2.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 0.8192 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos_theta[i] * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos_theta[i] - 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) + (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * sin_theta[i] * cos_theta[i] - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i]) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i]) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin_theta[i], 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * cos_theta[i] + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)), (3.0 / 2.0)) + (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i]) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i]) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * ((-0.4096) * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * ((-1.6384) * (M_PI * M_PI) * (r/Rmax) * pow((map1_kappa + 1.0), 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * pow(sin_theta[i], 2.0) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin_theta[i] * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) - 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * (M_PI * M_PI) * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos_theta[i] * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * (2.0 * map1_kappa - 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * cos_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i])) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - (pow((map1_kappa - 1.0), 2.0) * pow(sin_theta[i], 2.0) + (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * cos_theta[i] + pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta[i])) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) + (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)) - ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * (4.0 * map1_kappa * (pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * sin_theta[i] * cos_theta[i] - 1.0 / 2.0 * (pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i]) + (2.0 * map1_kappa - 2.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i]) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) + 1.0 / 2.0 * ((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])) * (2.0 * pow((map1_kappa - 1.0), 2.0) * pow(sin_theta[i], 2.0) + 2.0 * (map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * cos_theta[i] + 2.0 * pow((map1_kappa + 1.0), 2.0) * cos(2.0 * theta[i]))) * (0.4096 * M_PI * (2.0 * map1_kappa + 2.0) * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin_theta[i] * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * cos(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) - 0.4096 * M_PI * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * ((-4.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]) * sin(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) + 2.4576 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 5.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i])) + 2.4576 * pow(((r/Rmax) - 1.0), 5.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (r/Rmax) * (2.0 * map1_kappa + 2.0) * sin_theta[i]) * cos(M_PI * (r/Rmax) * ((-2.0) * map1_delta * (r/Rmax) - 2.0 * map1_kappa * cos_theta[i] + 2.0 * cos_theta[i]))) * exp(-tanh(10.0 * (r/Rmax) - 5.0)) / pow(((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)), (3.0 / 2.0)))) / ((r/Rmax) * sqrt((pow((map1_kappa + 1.0), 2.0) * pow(sin_theta[i], 2.0) + pow(((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]), 2.0)) * (map1_kappa * map1_kappa - 4.0 * map1_kappa * pow(sin_theta[i], 2.0) + 2.0 * map1_kappa + 1.0) - pow(((map1_kappa - 1.0) * ((-2.0) * map1_delta * (r/Rmax) - map1_kappa * cos_theta[i] + cos_theta[i]) * sin_theta[i] + 1.0 / 2.0 * pow((map1_kappa + 1.0), 2.0) * sin(2.0 * theta[i])), 2.0)));
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::rho_pole(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return 0.0;
}
/*........................................*/
void CartesianR6ZoniShafranov::rho_pole(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = 0.0;
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::rho_pole(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = 0.0;
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::coeffs1(double r, double Rmax) const
{
    return exp(-tanh(10.0 * (r/Rmax) - 5.0));
}
/*........................................*/
void CartesianR6ZoniShafranov::coeffs1(std::vector<double> const& r, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = exp(-tanh(10.0 * (r[i]/Rmax) - 5.0));
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::coeffs2(double r, double Rmax) const
{
    return 0.0;
}
/*........................................*/
void CartesianR6ZoniShafranov::coeffs2(std::vector<double> const& r, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = 0.0;
    }
}
/*........................................*/
double CartesianR6ZoniShafranov::phi_exact(double r, double theta, double map1_kappa, double map1_delta, double Rmax) const
{
    return 0.4096 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin(theta) + 2.0 * (r/Rmax) * sin(theta))) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos(theta) + 2.0 * (r/Rmax) * cos(theta)));
}
/*........................................*/
void CartesianR6ZoniShafranov::phi_exact(std::vector<double> const& r, double theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = 0.4096 * pow(((r[i]/Rmax) - 1.0), 6.0) * pow(((r[i]/Rmax) + 1.0), 6.0) * sin(M_PI * (2.0 * map1_kappa * (r[i]/Rmax) * sin(theta) + 2.0 * (r[i]/Rmax) * sin(theta))) * cos(M_PI * ((-2.0) * map1_delta * ((r[i]/Rmax) * (r[i]/Rmax)) - 2.0 * map1_kappa * (r[i]/Rmax) * cos(theta) + 2.0 * (r[i]/Rmax) * cos(theta)));
    }
}
/*........................................*/
void CartesianR6ZoniShafranov::phi_exact(double r, std::vector<double> const& theta, double map1_kappa, double map1_delta, double Rmax, std::vector<double>& sol, std::vector<double>& sin_theta, std::vector<double>& cos_theta) const
{
    for (std::size_t i=0; i < sol.size(); ++i)
    {
        sol[i] = 0.4096 * pow(((r/Rmax) - 1.0), 6.0) * pow(((r/Rmax) + 1.0), 6.0) * sin(M_PI * (2.0 * map1_kappa * (r/Rmax) * sin_theta[i] + 2.0 * (r/Rmax) * sin_theta[i])) * cos(M_PI * ((-2.0) * map1_delta * ((r/Rmax) * (r/Rmax)) - 2.0 * map1_kappa * (r/Rmax) * cos_theta[i] + 2.0 * (r/Rmax) * cos_theta[i]));
    }
}
/*........................................*/
