
CartesianRmax2_CircularGeometry::exact_solution:
(1-r/Rmax*r/Rmax)*sin(2*pi*r/Rmax*sin(t))*cos(2*pi*r/Rmax*cos(t))


    double r_term1 = 4.0 * M_PI * M_PI * (1.0 - r * r / (Rmax * Rmax)) * cos_theta * cos_theta * sin(2.0 * M_PI * r * sin_theta / Rmax) * cos(2.0 * M_PI * r * cos_theta / Rmax);
    double r_term2 = 4.0 * M_PI * M_PI * (1.0 - r * r / (Rmax * Rmax)) * sin_theta * sin_theta * sin(2.0 * M_PI * r * sin_theta / Rmax) * cos(2.0 * M_PI * r * cos_theta / Rmax);
    double r_term3 = 8.0 * M_PI * M_PI * (1.0 - r * r / (Rmax * Rmax)) * sin_theta * cos_theta * cos(2.0 * M_PI * r * sin_theta / Rmax) * sin(2.0 * M_PI * r * cos_theta / Rmax);
    double r_term4 = 8.0 * M_PI * r * cos_theta * sin(2.0 * M_PI * r * sin_theta / Rmax) * sin(2.0 * M_PI * r * cos_theta / Rmax);
    double r_term5 = 8.0 * M_PI * r * sin_theta * cos(2.0 * M_PI * r * cos_theta / Rmax) * cos(2.0 * M_PI * r * sin_theta / Rmax);
    double r_term6 = 2.0 * sin(2 * M_PI * r * sin_theta / Rmax) * cos(2 * M_PI * r * cos_theta / Rmax);

    double dr_dr = (-r_term1 - r_term2 - r_term3 -  r_term6)/(Rmax*Rmax) + (r_term4 - r_term5)/(Rmax*Rmax*Rmax); 


    double t_term1 = 2.0 * M_PI * r * cos_theta * cos_theta * sin(2.0 * M_PI * r * sin_theta / Rmax) * cos(2.0 * M_PI * r * cos_theta / Rmax);
    double t_term2 = 2.0 * M_PI * r * sin_theta * sin_theta * sin(2.0 * M_PI * r * sin_theta / Rmax) * cos(2.0 * M_PI * r * cos_theta / Rmax);
    double t_term3 = 4.0 * M_PI * r * sin_theta * cos_theta * cos(2.0 * M_PI * r * sin_theta / Rmax) * sin(2.0 * M_PI * r * cos_theta / Rmax);
    double t_term4 = cos_theta * sin(2 * M_PI * r * sin_theta / Rmax) * sin(2 * M_PI * r * cos_theta / Rmax);
    double t_term5 = sin_theta * cos(2 * M_PI * r * cos_theta / Rmax) * cos(2 * M_PI * r * sin_theta / Rmax);
    double common_factor = -(1.0 / (Rmax * Rmax * Rmax)) * 2.0 * M_PI * r * (r * r - Rmax * Rmax);

    double dt_dt = common_factor * (-t_term1/Rmax - t_term2/Rmax + t_term3/Rmax + t_term4 - t_term5);
    
    return - dr_dr - dt_dt;